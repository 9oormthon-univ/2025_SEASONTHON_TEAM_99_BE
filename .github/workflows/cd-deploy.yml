name: CD - Deploy to ECS 

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "배포할 ECR 이미지 태그 (비우면 main-latest 사용)"
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

concurrency:
  group: ecs-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      # 👇 아래 5개는 네 값으로 변경
      ECR_REPO: your-ecr-repo              # 예: mapzip-api
      ECS_CLUSTER: your-ecs-cluster        # 예: hackathon-cluster
      ECS_SERVICE: your-ecs-service        # 예: app-service
      TASK_FAMILY: your-task-family        # 예: app-task
      LOG_GROUP: /aws/ecs/your-app         # 로그 그룹명 (미리 생성 권장)
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GH_OIDC_ROLE_ARN }}  # 리포 시크릿에 저장한 OIDC Role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 입력이 비었으면 main-latest 사용
      - name: Decide image tag (default to main-latest)
        id: pick
        run: |
          if [ -n "${{ inputs.image_tag }}" ]; then
            echo "tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=main-latest" >> $GITHUB_OUTPUT
          fi
          echo "Using tag: $(cat $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Render Task Definition
        run: |
          IMAGE_URI="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ steps.pick.outputs.tag }}"
          sed "s|<IMAGE>|$IMAGE_URI|g; s|<LOG_GROUP>|${{ env.LOG_GROUP }}|g" deploy/ecs-taskdef.json > taskdef.out.json
          echo "IMAGE_URI=$IMAGE_URI"
          head -n 40 taskdef.out.json

      - name: Register TaskDef & Update Service (rolling)
        run: |
          aws ecs register-task-definition --cli-input-json file://taskdef.out.json > /tmp/td.json
          ARN=$(jq -r '.taskDefinition.taskDefinitionArn' /tmp/td.json)
          echo "TaskDef ARN: $ARN"
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "$ARN"
